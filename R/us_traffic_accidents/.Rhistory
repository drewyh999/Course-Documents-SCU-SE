dev.off()
#Visualize missing values
tiff("missing.tiff",res=800)
#vis_miss(accident.data.clean,warn_large_data = FALSE)
ggplot(aes(x = x,y = y),data = data.test) + geom_point()
#Visualize missing values
tiff("missing.tiff",res=800)
vis_miss(accident.data.clean,warn_large_data = FALSE)
View(accident.data.ori)
dev.off()
#Visualize missing values
tiff("missing.tiff",res=800)
ggplot(aes(x = x,y = y),data = data.test) + geom_point()
dev.off()
#Visualize missing values
tiff("missing.tiff")
ggplot(aes(x = x,y = y),data = data.test) + geom_point()
dev.off()
#Visualize missing values
tiff("missing.tiff",res = 300)
ggplot(aes(x = x,y = y),data = data.test) + geom_point()
dev.off()
#Visualize missing values
tiff("missing.tiff",res = 150)
ggplot(aes(x = x,y = y),data = data.test) + geom_point()
dev.off()
#Visualize missing values
tiff("missing.tiff",res = 150,pointsize = 2)
ggplot(aes(x = x,y = y),data = data.test) + geom_point()
dev.off()
#Visualize missing values
tiff("missing.tiff",res = 500,compression = "lzw")
ggplot(aes(x = x,y = y),data = data.test) + geom_point()
dev.off()
#Visualize missing values
tiff("missing.tiff",height = 800*5 ,width = 600*5,res = 500,compression = "lzw")
ggplot(aes(x = x,y = y),data = data.test) + geom_point()
dev.off()
#Visualize missing values
tiff("missing.tiff",height = 600*5 ,width = 600*5,res = 500,compression = "lzw")
vis_miss(accident.data.clean,warn_large_data = FALSE)
ggplot(aes(x = x,y = y),data = data.test) + geom_point()
dev.off()
#Visualize missing values
tiff("missing.tiff",height = 600*5 ,width = 600*5,res = 500,compression = "lzw")
vis_miss(accident.data.clean,warn_large_data = FALSE)
#ggplot(aes(x = x,y = y),data = data.test) + geom_point()
dev.off()
#ggplot(aes(x = x,y = y),data = data.test) + geom_point()
dev.off()
#ggplot(aes(x = x,y = y),data = data.test) + geom_point()
dev.off()
#Visualize missing values
tiff("missing.tiff",height = 600*5 ,width = 600*5,res = 500,compression = "lzw")
vis_miss(accident.data.clean,warn_large_data = FALSE)
dev.off()
accident.data.clean$Delay <- apply(accident.data.clean,1,FUN = severity2time)
#Discard Weather type column
accident.data.clean <- accident.data[,-14]
accident.data.clean <- subset(accident.data,select = demandedrow)
accident.data.clean <- subset(accident.data.clean, Start_Time > as.Date("2017-9-1"))
#Fill NAs
accident.data.clean$Wind_Chill.F. <- na.fill(accident.data.clean$Wind_Chill.F.,fill = "extend")
accident.data.clean$Wind_Speed.mph. <- na.fill(accident.data.clean$Wind_Speed.mph.,fill = "extend")
accident.data.clean$Precipitation.in. <- na.fill(accident.data.clean$Precipitation.in.,fill = "extend")
accident.data.clean$Temperature.F. <- na.fill(accident.data.clean$Temperature.F.,fill = "extend")
accident.data.clean$Visibility.mi. <- na.fill(accident.data.clean$Visibility.mi.,fill = "extend")
accident.data.clean$Humidity... <- na.fill(accident.data.clean$Humidity...,fill = "extend")
accident.data.clean$Pressure.in. <- na.fill(accident.data.clean$Pressure.in.,fill = "extend")
accident.data.clean$Delay <- apply(accident.data.clean,1,FUN = severity2time)
#Discard Weather type column
accident.data.clean <- accident.data[,-14]
accident.data.clean <- subset(accident.data,select = demandedrow)
accident.data.clean <- subset(accident.data.clean, Start_Time > as.Date("2017-9-1"))
#Fill NAs
accident.data.clean$Wind_Chill.F. <- na.fill(accident.data.clean$Wind_Chill.F.,fill = "extend")
accident.data.clean$Wind_Speed.mph. <- na.fill(accident.data.clean$Wind_Speed.mph.,fill = "extend")
accident.data.clean$Precipitation.in. <- na.fill(accident.data.clean$Precipitation.in.,fill = "extend")
accident.data.clean$Temperature.F. <- na.fill(accident.data.clean$Temperature.F.,fill = "extend")
accident.data.clean$Visibility.mi. <- na.fill(accident.data.clean$Visibility.mi.,fill = "extend")
accident.data.clean$Humidity... <- na.fill(accident.data.clean$Humidity...,fill = "extend")
accident.data.clean$Pressure.in. <- na.fill(accident.data.clean$Pressure.in.,fill = "extend")
accident.data.clean.back <- accident.data.clean
#accident.data.clean <- accident.data.clean[,-14]
#accident.data.clean <- accident.data.clean[,-6]
#accident.data.clean <- accident.data.clean[,-2]
#Function to map the severity to delay time
accident.data.clean$Delay <- 0
severity2time <- function(data){
class <- data["Severity"]
if(class == 1){
#The class 1
out <- floor(runif(1,0,150))
}
else if(class == 2){
out <- floor(runif(1,150,480))
}
else if(class == 3){
out <- floor(runif(1,480,1080))
}
else if(class == 4){
out <- floor(runif(1,1080,1800))
}
return(out)
}
accident.data.clean$Delay <- apply(accident.data.clean,1,FUN = severity2time)
#accident.data.clean$Weather_Condition <- apply(accident.data.clean,1,FUN = condition2level)
accident.data.clean.back <- accident.data.clean
#Discard Weather type column
accident.data.clean <- accident.data.clean[,-14]
cor.mtx <- cor(accident.data.clean[,7:],method = "spearman")
cor.mtx <- cor(accident.data.clean[,7:17],method = "spearman")
View(cor.mtx)
citation("corrplot")
? cor
citation("stats")
rownames(cor.mtx) <- c("Temperature(F)","Wind Chill(F)","Humidity(%)","Pressure(in)","Visibility(miles)","Wind Speed(mph)","Precipitation(in)","Crossing","Junction","Traffic Signal","Delay")
colnames(cor.mtx) <- rownames(cor.rst)
colnames(cor.mtx) <- rownames(cor.mtx)
corrplot(cor.mtx, type="lower", tl.col="black", tl.srt=30, method="color", tl.cex=0.8, diag=TRUE, tl.pos="ld")
#The data is incomplete before 2017-9-1
lm_model_1 <- lm(Delay ~ Temperature.F.+ Wind_Chill.F.:Wind_Speed.mph. +Pressure.in.+ Precipitation.in. + Humidity...+ Visibility.mi.+Crossing+Junction+Traffic_Signal
,data = accident.data.clean)
summary(gvlma(lm_model))
#The data is incomplete before 2017-9-1
lm_model_1 <- lm(Delay ~ Temperature.F.+ Wind_Chill.F.+Wind_Speed.mph. +Pressure.in.+ Precipitation.in. + Humidity...+ Visibility.mi.+Crossing+Junction+Traffic_Signal
,data = accident.data.clean)
summary(gvlma(lm_model))
#The data is incomplete before 2017-9-1
lm_model_1 <- lm(Delay ~ Temperature.F.+ Wind_Chill.F.+Wind_Speed.mph. +Pressure.in.+ Precipitation.in. + Humidity...+ Visibility.mi.+Crossing+Junction+Traffic_Signal
,data = accident.data.clean)
summary(gvlma(lm_model_1))
#The data is incomplete before 2017-9-1
lm_model_1 <- lm(Delay ~ Temperature.F.+ Wind_Chill.F.:Wind_Speed.mph. +Pressure.in.+ Precipitation.in. + Humidity...+ Visibility.mi.+Crossing+Junction+Traffic_Signal
,data = accident.data.clean)
summary(gvlma(lm_model_1))
confint(lm_model_1)
outlierTest(lm_model)
outlierTest(lm_model_1)
#The data is incomplete before 2017-9-1
lm_model_1 <- lm(Delay ~ Temperature.F.+ Wind_Chill.F.:Wind_Speed.mph. +Pressure.in.+ Precipitation.in. + Humidity...+ Visibility.mi.+Crossing+Junction+Traffic_Signal
,data = accident.data.clean)
summary(gvlma(lm_model_1))
lm_model_2 <- lm(Delay ~ Temperature.F.+ Wind_Chill.F.:Wind_Speed.mph. +Pressure.in.+ Precipitation.in. + Humidity...+Crossing+Junction+Traffic_Signal
,data = accident.data.clean)
summary(gvlma(lm_model_2))
vif(lm_model)
chisq.test()
chisq.test(lm_model_1,lm_model_2)
#The data is incomplete before 2017-9-1
lm_model_1 <- lm(Delay ~ Temperature.F.+ Wind_Chill.F.:Wind_Speed.mph. +Pressure.in.+ Precipitation.in. + Humidity...+ Visibility.mi.+Crossing+Junction+Traffic_Signal
,data = accident.data.train)
lm_model_2 <- lm(Delay ~ Temperature.F.+ Wind_Chill.F.:Wind_Speed.mph. +Pressure.in.+ Precipitation.in. + Humidity...+Crossing+Junction+Traffic_Signal
,data = accident.data.train)
#Get the trainning set and validation set
dt.v <- accident.data.clean
#Get the trainning set and validation set
dt.v <- accident.data.clean
train_index <- sample(1:nrow(dt.v), 0.8 * nrow(dt.v))
test_index <- setdiff(1:nrow(dt.v), train_index)
accident.data.train.lm <- df.v[train_index,]
accident.data.train.lm <- dt.v[train_index,]
accident.data.test.lm <- dt.v[test_index,]
#The data is incomplete before 2017-9-1
lm_model_1 <- lm(Delay ~ Temperature.F.+ Wind_Chill.F.:Wind_Speed.mph. +Pressure.in.+ Precipitation.in. + Humidity...+ Visibility.mi.+Crossing+Junction+Traffic_Signal
,data = accident.data.train.lm)
lm_model_2 <- lm(Delay ~ Temperature.F.+ Wind_Chill.F.:Wind_Speed.mph. +Pressure.in.+ Precipitation.in. + Humidity...+Crossing+Junction+Traffic_Signal
,data = accident.data.train.lm)
summary(gvlma(lm_model_2))
confint(lm_model_2)
#Make prediction
lm.pred.1 <- predict(lm_model_1,accident.data.test.lm)
lm.pred.2 <- predict(lm_model_2,accident.data.test.lm)
View(lm.pred.1)
df.pred <- data.frame(lm.pred.1,lm.pred.2)
View(df.pred)
chisq.test(df.pred$lm.pred.1,df.pred$lm.pred.2)
df.pred <- df.pred[1:50000,]
chisq.test(df.pred$lm.pred.1,df.pred$lm.pred.2)
#Cut the size to 50000 for the chisqure test size limit
df.pred <- df.pred[1:5000,]
chisq.test(df.pred$lm.pred.1,df.pred$lm.pred.2)
#Prediction model for time we use the weather timestamp as the start point of prediction
accident.data.clean$TimeGap <- 0
accident.data.clean$TimeGap <- abs(accident.data.clean$Start_Time - accident.data.clean$Weather_Timestamp)
accident.data.clean$TimeGap <- as.numeric(accident.data.clean$TimeGap)
as.Date("2017-1-1") - as.Date("2016-12-31")
as.numeric(as.Date("2017-1-1") - as.Date("2016-12-31"))
as.numeric(as.Date("2017-1-1 9:53:00") - as.Date("2017-1-1 9:50:00"))
as.Date("2017-1-1 9:53:00") - as.Date("2017-1-1 9:50:00")
accident.data.clean[1,"Start_Time"] - accident.data.clean[1,"Weather_Timestamp"]
as.numeric(accident.data.clean[1,"Start_Time"] - accident.data.clean[1,"Weather_Timestamp"])
timediff <- accident.data.clean[1,"Start_Time"] - accident.data.clean[1,"Weather_Timestamp"]
as.numeric(timediff)
class(accident.data.clean[1,"Start_Time"])
class(accident.data.clean$Start_Time)
accident.train <- accident.train[1:50000,]
time_model <- randomForest(TimeGap ~ Temperature.F.+Pressure.in.+Precipitation.in.+Humidity...+Wind_Speed.mph. + Junction+Traffic_Signal
,data = accident.train)
accident.train <- accident.train[1:50000,]
accident.train <- accident.data.train[1:50000,]
time_model <- randomForest(TimeGap ~ Temperature.F.+Pressure.in.+Precipitation.in.+Humidity...+Wind_Speed.mph. + Junction+Traffic_Signal
,data = accident.train)
View(data.test)
summary(time_nodel)
summary(time_model)
print(time_model)
plot(time_model)
accident.test <- accident.data.test[1:5000,]
importance(time_model)
View(accident.train)
max(accident.train$TimeGap)
accident.train <- subset(accident.data.train, TimeGap <= 1700)
accident.train <- accident.train[1:50000,]
diff2bin <- function(data){
gap <- data["TimeGap"]
if(gap <= 300){
bin <-  1
}
else if(gap > 300 & gap <= 600){
bin <- 2
}
else if(gap > 600 & gap <= 900){
bin <- 3
}
else if(gap > 900 & gap <= 1200){
bin <- 4
}
else if(gap > 1200){
bin <- 5
}
}
accident.train$bin <- apply(accident.train,diff2bin)
accident.train$bin <- apply(accident.train,1,FUN = diff2bin)
time_model <- randomForest(bin ~ Temperature.F.+Pressure.in.+Precipitation.in.+Humidity...+Wind_Speed.mph. + Junction+Traffic_Signal+Crossing
,data = accident.train)
accident.train.back <- accident.train
print(time_model)
table(accident.train%bin)
table(accident.train$bin)
table(accident.train$TimeGap)
diff2bin <- function(data){
gap <- data["TimeGap"]
if(gap <= 300){
bin <-  1
}
else if(gap > 300 && gap <= 600){
bin <- 2
}
else if(gap > 600 && gap <= 900){
bin <- 3
}
else if(gap > 900 && gap <= 1200){
bin <- 4
}
else if(gap > 1200){
bin <- 5
}
}
accident.train$bin <- apply(accident.train,1,FUN = diff2bin)
table(accident.train$bin)
bin <- 4
diff2bin <- function(data){
gap <- data["TimeGap"]
if(gap <= 300){
bin <-  1
}
else if(gap > 300 && gap <= 600){
bin <- 2
}
else if(gap > 600 && gap <= 900){
bin <- 3
}
else if(gap > 900 && gap <= 1200){
bin <- 4
}
else if(gap > 1200){
bin <- 5
}
return(bin)
}
accident.train$bin <- apply(accident.train,1,FUN = diff2bin)
table(accident.train$bin)
900 <= 300
diff2bin <- function(data){
gap <- data["TimeGap"]
if(gap <= 300){
bin <-  1
}
else if((gap > 300) && (gap <= 600)){
bin <- 2
}
else if((gap > 600) && (gap <= 900)){
bin <- 3
}
else if((gap > 900) && (gap <= 1200)){
bin <- 4
}
else if(gap > 1200){
bin <- 5
}
return(bin)
}
accident.train$bin <- apply(accident.train,1,FUN = diff2bin)
table(accident.train$bin)
diff2bin <- function(data){
gap <- data["TimeGap"]
print(gap)
if(gap <= 300){
bin <-  1
}
else if((gap > 300) && (gap <= 600)){
bin <- 2
}
else if((gap > 600) && (gap <= 900)){
bin <- 3
}
else if((gap > 900) && (gap <= 1200)){
bin <- 4
}
else if(gap > 1200){
bin <- 5
}
return(bin)
}
accident.train$bin <- apply(accident.train,1,FUN = diff2bin)
diff2bin <- function(data){
gap <- data["TimeGap"]
print(gap)
print(gap <= 300)
if(gap <= 300){
bin <-  1
}
else if((gap > 300) && (gap <= 600)){
bin <- 2
}
else if((gap > 600) && (gap <= 900)){
bin <- 3
}
else if((gap > 900) && (gap <= 1200)){
bin <- 4
}
else if(gap > 1200){
bin <- 5
}
return(bin)
}
accident.train$bin <- apply(accident.train,1,FUN = diff2bin)
1900.0 <= 300
diff2bin <- function(data){
gap <- data["TimeGap"]
print(gap)
class(gap)
print(gap <= 300)
if(gap <= 300){
bin <-  1
}
else if((gap > 300) && (gap <= 600)){
bin <- 2
}
else if((gap > 600) && (gap <= 900)){
bin <- 3
}
else if((gap > 900) && (gap <= 1200)){
bin <- 4
}
else if(gap > 1200){
bin <- 5
}
return(bin)
}
accident.train$bin <- apply(accident.train,1,FUN = diff2bin)
print(class(gap))
diff2bin <- function(data){
gap <- data["TimeGap"]
print(gap)
print(class(gap))
print(gap <= 300)
if(gap <= 300){
bin <-  1
}
else if((gap > 300) && (gap <= 600)){
bin <- 2
}
else if((gap > 600) && (gap <= 900)){
bin <- 3
}
else if((gap > 900) && (gap <= 1200)){
bin <- 4
}
else if(gap > 1200){
bin <- 5
}
return(bin)
}
accident.train$bin <- apply(accident.train,1,FUN = diff2bin)
diff2bin <- function(data){
gap <- as.numeric(data["TimeGap"])
#print(gap)
#print(paste(class(gap)))
print(gap <= 300)
if(gap <= 300){
bin <-  1
}
else if((gap > 300) && (gap <= 600)){
bin <- 2
}
else if((gap > 600) && (gap <= 900)){
bin <- 3
}
else if((gap > 900) && (gap <= 1200)){
bin <- 4
}
else if(gap > 1200){
bin <- 5
}
return(bin)
}
accident.train$bin <- apply(accident.train,1,FUN = diff2bin)
accident.train.back <- accident.train
table(accident.train$bin)
time_model <- randomForest(bin ~ Temperature.F.+Pressure.in.+Precipitation.in.+Humidity...+Wind_Speed.mph. + Junction+Traffic_Signal+Crossing
,data = accident.train)
print(time_model)
plot(time_model)
accident.train.back <- accident.train
accident.train$bin <- as.factor(accident.train$bin)
time_model <- randomForest(bin ~ Temperature.F.+Pressure.in.+Precipitation.in.+Humidity...+Wind_Speed.mph. + Junction+Traffic_Signal+Crossing
,data = accident.train)
summary(time_model)
print(time_model)
plot(time_model)
time_model <- randomForest(bin ~ Temperature.F.+Pressure.in.+Precipitation.in.+Humidity...
,data = accident.train)
print(time_model)
time_model <- randomForest(bin ~ Temperature.F.+ Wind_Chill.F.+Wind_Speed.mph. +Pressure.in.+ Precipitation.in. + Humidity...+ Visibility.mi.+Crossing+Junction+Traffic_Signal
,data = accident.train)
print(time_model)
time_model <- randomForest(bin ~ Temperature.F.+ Wind_Chill.F.+Wind_Speed.mph. +Pressure.in.+ Precipitation.in. + Humidity...+Crossing+Junction+Traffic_Signal
,data = accident.train)
print(time_model)
diff2bin <- function(data){
gap <- as.numeric(data["TimeGap"])
print(gap <= 300)
if(gap <= 300){
bin <-  1
}
else if((gap > 300) && (gap <= 600)){
bin <- 2
}
else {
bin <- 3
}
return(bin)
}
accident.train$bin <- apply(accident.train,1,FUN = diff2bin)
accident.train.back <- accident.train
table(accident.train$bin)
accident.train$bin <- as.factor(accident.train$bin)
time_model <- randomForest(bin ~ Temperature.F.+ Wind_Chill.F.+Wind_Speed.mph. +Pressure.in.+ Precipitation.in. + Humidity...+ Visibility.mi.+Crossing+Junction+Traffic_Signal
,data = accident.train)
print(time_model)
plot(time_model)
accident.test$bin <- apply(accident.test,1,FUN = diff2bin)
diff2bin <- function(data){
gap <- as.numeric(data["TimeGap"])
if(gap <= 300){
bin <-  1
}
else if((gap > 300) && (gap <= 600)){
bin <- 2
}
else {
bin <- 3
}
return(bin)
}
accident.test.back <- accident.test
plot(time_model)
tm.pred <- predict(accident.test,time_model)
accident.test$bin <- as.factor(accident.test$bin)
tm.pred <- predict(accident.test,time_model)
accident.train$bin <- as.factor(accident.train$bin)
time_model <- randomForest(bin ~ Temperature.F.+ Wind_Chill.F.+Wind_Speed.mph. +Pressure.in.+ Precipitation.in. + Humidity...+ Visibility.mi.+Crossing+Junction+Traffic_Signal
,data = accident.train)
print(time_model)
tm.pred <- predict(accident.test,time_model)
accident.test <- accident.test[,-2]
accident.test <- accident.test[,-5]
tm.pred <- predict(accident.test,time_model)
tm.pred <- predict(accident.test,time_model)
tm.pred <- predict(time_model,accident.test)
perf <- table(accident.test$bin,tm.pred,dnn = c("Actual","Predicted"))
perf
df.pred <- data.frame(accident.test$bin,tm.pred)
df.pred$x <- rownames(df.pred)
View(df.pred)
plot(time_model)
install.packages("pROC")
roc(tm.pred,accident.test$bin)
library(pROC)
roc(tm.pred,accident.test$bin)
roc(accident.test$bin,tm.pred)
roc(accident.test$bin,tm.pred)
? multiclass.roc
multiclass.roc(accident.test$bin,tm.pred)
tm.pred <- predict(time_model,accident.test,type = "prob")
multiclass.roc(accident.test$bin,tm.pred)
citataion("randomForest")
citation("randomForest")
citation("pROC")
importance(time_model)
